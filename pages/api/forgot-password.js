// pages/api/forgot-password.js

import mongoose from 'mongoose';
import crypto from 'crypto';
import nodemailer from 'nodemailer'; 
import User from '../../models/User';
import Driver from '../../models/Driver';

// Database connection function (Essential for every API file)
const connectDB = async () => {
Â if (mongoose.connections[0].readyState) return;
Â await mongoose.connect(process.env.MONGODB_URI, {
Â  Â  dbName: 'Ryda',
Â });
};

// ðŸ›‘ Nodemailer Transporter Setup (Using 'service: "gmail"' which previously worked) ðŸ›‘
const transporter = nodemailer.createTransport({
    service: 'gmail', // This automatically configures host/port for Gmail
    auth: {
        user: process.env.EMAIL_USER, // Sender email from .env.local
        pass: process.env.EMAIL_PASS, // App password from .env.local
    },
});

// API handler
export default async function handler(req, res) {
Â if (req.method !== 'POST') {
Â  Â return res.status(405).json({ message: 'Method not allowed' });
Â }

Â try {
Â  Â await connectDB();

Â  Â const { email, accountType } = req.body;

Â  Â if (!email || !accountType) {
Â  Â  Â return res
Â  Â  Â  Â .status(400)
Â  Â  Â  Â .json({ message: 'Missing email or account type' });
Â  Â }

Â  Â // Choose the correct model
Â  Â const Model = accountType === 'driver' ? Driver : User;

Â  Â // 1. Find the user by email
Â  Â const user = await Model.findOne({ email });

Â  Â // SECURITY: Always return a generic success message if the user is not found.
Â  Â if (!user) {
        console.log(`Password reset requested for non-existent account: ${email}`);
Â  Â  Â return res.status(200).json({
Â  Â  Â  Â message:
Â  Â  Â  Â  Â 'If an account with that email exists, a password reset link has been sent.',
Â  Â  Â });
Â  Â }

Â  Â // 2. Generate a secure, unique token
Â  Â const resetToken = crypto.randomBytes(32).toString('hex');
Â  Â // Set token expiry to 1 hour (3600000 milliseconds)
Â  Â const resetTokenExpiry = Date.now() + 3600000; 

Â  Â // 3. Save the token and expiry to the user's document
Â  Â user.resetToken = resetToken;
Â  Â user.resetTokenExpiry = resetTokenExpiry;
Â  Â await user.save(); // ðŸ›‘ This is the critical save operation ðŸ›‘
    
    // Debug Log: Check the token being saved to ensure consistency
    console.log('DEBUG: TOKEN SAVED TO DB:', resetToken); 

Â  Â // Determine the base URL for the reset link
Â  Â const baseUrl = process.env.NODE_ENV === 'production' 
Â  Â  Â  Â  ? 'https://your-production-url.com' 
Â  Â  Â  Â  : 'http://localhost:3000';
Â  Â  
Â  Â // 4. Construct the full reset link
Â  Â const resetUrl = `${baseUrl}/reset-password?token=${resetToken}&type=${accountType}`;

Â  Â // ðŸ›‘ EMAIL SENDING IMPLEMENTATION ðŸ›‘
    try {
        await transporter.sendMail({
            to: user.email,
            from: process.env.EMAIL_USER, 
            subject: 'Ryda Password Reset Request',
            html: `
                <div style="font-family: Arial, sans-serif; padding: 20px; border: 1px solid #eee; border-radius: 8px;">
                    <h2 style="color: #333;">Password Reset for Ryda Account</h2>
                    <p>Hello,</p>
                    <p>You recently requested to reset the password for your ${accountType} account (${user.email}).</p>
                    <p>Please click the button below to complete the reset process:</p>
                    <a href="${resetUrl}" style="display: inline-block; padding: 10px 20px; margin-top: 15px; background-color: #2563EB; color: white; text-decoration: none; border-radius: 5px; font-weight: bold;">
                        Reset My Password
                    </a>
                    <p style="margin-top: 20px; font-size: 0.9em; color: #777;">
                        This link will expire in 1 hour.
                    </p>
                    <p style="font-size: 0.8em; color: #aaa;">Link: ${resetUrl}</p>
                </div>
            `,
        });
        console.log(`Password reset email successfully sent to: ${user.email}`);

    } catch (mailError) {
        // Log the error but continue to return 200 to the client for security
        console.error('NODEMAILER FAILED TO SEND EMAIL:', mailError);
    }
Â  Â 
Â  Â // 5. Respond to the client
Â  Â return res.status(200).json({
Â  Â  Â message:
Â  Â  Â  Â 'Password reset link sent! Check your email.',
Â  Â });
Â } catch (err) {
Â  Â console.error('Forgot password process error:', err);
Â  Â return res
Â  Â  Â .status(500)
Â  Â  Â .json({ message: 'Something went wrong. Please try again.' });
Â }
}