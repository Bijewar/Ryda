import mongoose from "mongoose";

const UserSchema = new mongoose.Schema(
Â  {
Â  Â  name: { type: String, required: true },
Â  Â  email: { 
Â  Â  Â  type: String, 
Â  Â  Â  required: true, 
Â  Â  Â  unique: true,
Â  Â  Â  index: true 
Â  Â  },
Â  Â  password: { type: String },
Â  Â  provider: { type: String, default: "credentials" },
Â  Â  profilePic: { type: String },
Â  Â  accountType: { 
Â  Â  Â  type: String, 
Â  Â  Â  enum: ["user", "driver"], 
Â  Â  Â  default: "user",
Â  Â  Â  index: true 
Â  Â  },
Â  Â  firstName: { type: String },
Â  Â  lastName: { type: String },
Â  Â  phone: { type: String },
Â  Â  driverLicense: { 
Â  Â  Â  type: String, 
Â  Â  Â  required: function() { return this.accountType === "driver" } 
Â  Â  },
Â  Â  vehicleModel: { 
Â  Â  Â  type: String, 
Â  Â  Â  required: function() { return this.accountType === "driver" } 
Â  Â  },
Â  Â  licensePlate: { 
Â  Â  Â  type: String, 
Â  Â  Â  required: function() { return this.accountType === "driver" } 
Â  Â  },
Â  Â  address: { 
Â  Â  Â  type: String, 
Â  Â  Â  required: function() { return this.accountType === "driver" } 
Â  Â  },
Â  Â  licenseFront: { type: String },
Â  Â  licenseBack: { type: String },
Â  Â  isApproved: { 
Â  Â  Â  type: Boolean, 
Â  Â  Â  default: function() { return this.accountType === "user" ? true : false },
Â  Â  Â  index: true 
Â  Â  },
Â  Â  isActive: { type: Boolean, default: true },
    // ðŸ›‘ START: Forgot Password Fields ðŸ›‘
    resetToken: { type: String },
    resetTokenExpiry: { type: Date },
    // ðŸ›‘ END: Forgot Password Fields ðŸ›‘
Â  },
Â  { 
Â  Â  timestamps: true,
Â  Â  toJSON: { virtuals: true }
Â  }
);

UserSchema.virtual('fullName').get(function() {
Â  return this.firstName && this.lastName 
Â  Â  ? `${this.firstName} ${this.lastName}`
Â  Â  : this.name;
});

export default mongoose.models.User || mongoose.model("User", UserSchema);